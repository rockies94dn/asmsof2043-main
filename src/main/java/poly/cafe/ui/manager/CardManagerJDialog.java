/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package poly.cafe.ui.manager;

import java.util.List;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;
import poly.cafe.dao.impl.BillDAOImpl;
import poly.cafe.dao.impl.CardDAOImpl;
import poly.cafe.entity.Bill;
import poly.cafe.entity.Card;
import poly.cafe.util.XDialog;
import poly.cafe.util.XValidInput;

/**
 *
 * @author dtoan
 */
public class CardManagerJDialog extends javax.swing.JDialog implements CardController {

    /**
     * Creates new form CardManagerJDialog
     */
    public CardManagerJDialog(JFrame frame, boolean modal) {
        super(frame, modal);
        initComponents();
        setLocationRelativeTo(this);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btgStatus = new javax.swing.ButtonGroup();
        tabs = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        btnSelectNone = new javax.swing.JButton();
        btnDeleteSelectedItem = new javax.swing.JButton();
        btnSelectAll = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCardsList = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtCardId = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        btnCreate = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClearText = new javax.swing.JButton();
        rdbOperating = new javax.swing.JRadioButton();
        rdbError = new javax.swing.JRadioButton();
        rdbLose = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Card Manager");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        btnSelectNone.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Unaccept.png"))); // NOI18N
        btnSelectNone.setText("Select None");
        btnSelectNone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectNoneActionPerformed(evt);
            }
        });

        btnDeleteSelectedItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Delete_1.png"))); // NOI18N
        btnDeleteSelectedItem.setText("Delete Selected Item");
        btnDeleteSelectedItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteSelectedItemActionPerformed(evt);
            }
        });

        btnSelectAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Accept_1.png"))); // NOI18N
        btnSelectAll.setText("Select All");
        btnSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectAllActionPerformed(evt);
            }
        });

        tblCardsList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Card ID", "Status", "Selected"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCardsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCardsListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblCardsList);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSelectAll, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSelectNone, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(btnDeleteSelectedItem)
                .addGap(17, 17, 17))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 631, Short.MAX_VALUE)
                    .addComponent(jSeparator1))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSelectAll)
                    .addComponent(btnSelectNone)
                    .addComponent(btnDeleteSelectedItem))
                .addContainerGap())
        );

        tabs.addTab("Cards List", jPanel2);

        jLabel1.setText("Card ID:");

        jLabel2.setText("Status:");

        btnCreate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Add_1.png"))); // NOI18N
        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Edit_1.png"))); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Delete_1.png"))); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnClearText.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Refresh_1.png"))); // NOI18N
        btnClearText.setText("Clear Text");
        btnClearText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearTextActionPerformed(evt);
            }
        });

        btgStatus.add(rdbOperating);
        rdbOperating.setText("Operating");

        btgStatus.add(rdbError);
        rdbError.setText("Error");

        btgStatus.add(rdbLose);
        rdbLose.setText("Lose");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(rdbOperating)
                        .addGap(18, 18, 18)
                        .addComponent(rdbError)
                        .addGap(28, 28, 28)
                        .addComponent(rdbLose))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnClearText))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jSeparator2)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtCardId, javax.swing.GroupLayout.DEFAULT_SIZE, 614, Short.MAX_VALUE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtCardId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdbOperating)
                    .addComponent(rdbError)
                    .addComponent(rdbLose))
                .addGap(29, 29, 29)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreate)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(btnClearText))
                .addContainerGap(11, Short.MAX_VALUE))
        );

        tabs.addTab("Form", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabs)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabs)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
        if (isDuplicateCardId()) {
            XDialog.alert("This Card ID already exists.");
            return;
        }
        if (isValidInput()) {
            this.create();
            XDialog.message("Created successfully!");
        } else {
            XDialog.alert("Please enter complete and correctly formatted information.");
        }
    }//GEN-LAST:event_btnCreateActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        this.open();
    }//GEN-LAST:event_formWindowOpened

    private void tblCardsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCardsListMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            this.edit();
        }
    }//GEN-LAST:event_tblCardsListMouseClicked

    private void btnClearTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearTextActionPerformed
        // TODO add your handling code here:
        this.clear();
    }//GEN-LAST:event_btnClearTextActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        if (isCardInUse() || isCardHasPaymentHistory()) {
            XDialog.alert("This card is in use or already has payment history and can not be deleting!");
            return;
        }
        this.delete();
        XDialog.message("Deleted successfully!");
        this.clear();
        this.fillToTable();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        if (isCardInUse()) {
            XDialog.alert("Please completing the bill before updating card!");
            return;
        }
        if (isValidInput()) {
            this.update();
            XDialog.message("Updated succesfully!");
        } else {
            XDialog.alert("Please enter complete and correctly formatted information.");
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectAllActionPerformed
        // TODO add your handling code here:
        this.checkAll();
    }//GEN-LAST:event_btnSelectAllActionPerformed

    private void btnSelectNoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectNoneActionPerformed
        // TODO add your handling code here:
        this.uncheckAll();
    }//GEN-LAST:event_btnSelectNoneActionPerformed

    private void btnDeleteSelectedItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteSelectedItemActionPerformed
        // TODO add your handling code here:
        this.deleteCheckedItems();
    }//GEN-LAST:event_btnDeleteSelectedItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CardManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CardManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CardManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CardManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CardManagerJDialog(new JFrame(), true).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btgStatus;
    private javax.swing.JButton btnClearText;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteSelectedItem;
    private javax.swing.JButton btnSelectAll;
    private javax.swing.JButton btnSelectNone;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JRadioButton rdbError;
    private javax.swing.JRadioButton rdbLose;
    private javax.swing.JRadioButton rdbOperating;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTable tblCardsList;
    private javax.swing.JTextField txtCardId;
    // End of variables declaration//GEN-END:variables

    CardDAOImpl dao = new CardDAOImpl();
    List<Card> items = List.of();
    List<Bill> billsList = List.of();
    BillDAOImpl billDAO = new BillDAOImpl();

    public boolean isCardInUse() {
        return billDAO.hasActiveBill(Integer.valueOf(txtCardId.getText()));
    }

    public boolean isCardHasPaymentHistory() {
        billsList = billDAO.findAllUsingCard();
        for (Bill bill : billsList) {
            if (Integer.valueOf(txtCardId.getText()) == bill.getCardId()) {
                return true;
            }
        }
        return false;
    }

    public boolean isDuplicateCardId() {
        List<Card> cardsList = dao.findAll();
        for (Card card : cardsList) {
            if (txtCardId.getText().equalsIgnoreCase(card.getId().toString())) {
                return true;
            }
        }
        return false;
    }

    public boolean isValidInput() {
        boolean isCardIdValid = XValidInput.isNumber(txtCardId.getText());
        boolean isStatusSelected = rdbOperating.isSelected() || rdbError.isSelected() || rdbLose.isSelected();
        return isCardIdValid && isStatusSelected;
    }

    @Override
    public void open() {
        this.setLocationRelativeTo(null);
        this.fillToTable();
        this.clear();
    }

    @Override
    public void setForm(Card entity) {
        txtCardId.setText(entity.getId().toString());
        rdbOperating.setSelected(entity.getStatus() == 0);
        rdbError.setSelected(entity.getStatus() == 1);
        rdbLose.setSelected(entity.getStatus() == 2);
    }

    @Override
    public Card getForm() {
        Card entity = new Card();
        entity.setId(Integer.valueOf(txtCardId.getText()));
        if (rdbOperating.isSelected()) {
            entity.setStatus(0);
        } else if (rdbError.isSelected()) {
            entity.setStatus(1);
        } else if (rdbLose.isSelected()) {
            entity.setStatus(2);
        }
        return entity;
    }

    @Override
    public void fillToTable() {
        DefaultTableModel model = (DefaultTableModel) tblCardsList.getModel();
        model.setRowCount(0);
        items = dao.findAll();
        items.forEach(item -> {
            Object[] rowData = {
                item.getId(),
                item.getStatus() == 0 ? "Operating" : (item.getStatus() == 1 ? "Error" : "Lose"),
                false
            };
            model.addRow(rowData);
        });
    }

    @Override
    public void edit() {
        Card entity = items.get(tblCardsList.getSelectedRow());
        this.setForm(entity);
        this.setEditable(true);
        tabs.setSelectedIndex(1);
    }

    @Override
    public void create() {
        Card entity = this.getForm();
        if (dao.create(entity) != null) {
            XDialog.confirm("Created succesfully!");
            this.fillToTable();
            this.clear();
        }
    }

    @Override
    public void update() {
        if (XDialog.confirm("Do you want to update this item?")) {
            Card entity = this.getForm();
            dao.update(entity);
            this.fillToTable();
        }
    }

    @Override
    public void delete() {
        if (XDialog.confirm("Do you want to remove this item?")) {
            int id = Integer.parseInt(txtCardId.getText());
            dao.deleteById(id);
            this.fillToTable();
        }
    }

    @Override
    public void clear() {
        txtCardId.setText("");
        rdbOperating.setSelected(false);
        rdbError.setSelected(false);
        rdbLose.setSelected(false);
        this.setEditable(false);
    }

    @Override
    public void setEditable(boolean editable) {
        txtCardId.setEnabled(!editable);
        btnCreate.setEnabled(!editable);
        btnUpdate.setEnabled(editable);
        btnDelete.setEnabled(editable);
        btnClearText.setEnabled(editable);
    }

    @Override
    public void checkAll() {
        this.setCheckedAll(true);
    }

    private void setCheckedAll(boolean checked) {
        for (int i = 0; i < tblCardsList.getRowCount(); i++) {
            tblCardsList.setValueAt(checked, i, 2);
        }
    }

    @Override
    public void uncheckAll() {
        this.setCheckedAll(false);
    }

    @Override
    public void deleteCheckedItems() {
        boolean isSelected = false;
        for (int i = 0; i < tblCardsList.getRowCount(); i++) {
            Boolean value = (Boolean) tblCardsList.getValueAt(i, 2);
            if (value != null && value) {
                isSelected = true;
                break;
            }
        }
        if (!isSelected) {
            XDialog.alert("Please select cards that you want to delete");
            return;
        }

        if (tblCardsList.getSelectedRow() != -1) {
            try {
                if (XDialog.confirm("Do you want to delete selected items?")) {
                    for (int i = 0; i < tblCardsList.getRowCount(); i++) {
                        if ((Boolean) tblCardsList.getValueAt(i, 2)) {
                            dao.deleteById(items.get(i).getId());
                        }
                    }
                    this.fillToTable();
                }
            } catch (Exception e) {
                if (e.toString().contains("The DELETE statement conflicted with the REFERENCE constraint")) {
                    XDialog.alert("The cards are in use or already have payment history and can't be delete.");
                }
            }
        }

    }

    @Override
    public void moveFirst() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void movePrevious() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void moveNext() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void moveLast() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void moveTo(int rowIndex) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

}
